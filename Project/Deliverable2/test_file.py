# -*- coding: utf-8 -*-
"""test_file.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BMc3R-RppgQu8rjNqYJFN-kv1oAjVDC-
"""

import csv
import json
from deliverable2 import *

# Initialize the URLValidator class
validator = PageCredibilityEvaluator()

# Define the CSV file name
csv_file = "user_ratings.csv"

# Create the CSV file with headers if it doesn't exist
def create_csv():
    with open(csv_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["user_prompt", "url_to_check", "func_rating", "custom_rating"])

#Function to scale a value to a 1-5 range
def scale_to_1_5(value, min_value=0, max_value=100):
    """ Scales a given value to a range of 1 to 5 """
    return 1 + (value - min_value) * 4 / (max_value - min_value)


# Function to add an entry to the CSV
def add_entry():
    # Get user input for statement and URL
    user_prompt = input("Enter the user statement: ")
    url_to_check = input("Enter the URL: ")

    # Run the validation
    result = validator.evaluate_url_credibility(user_prompt, url_to_check)

    # Extract custom rating from the result (assuming 'stars' is available)
    try:
        custom_rating = result['stars']['score']  # Custom rating based on star score (already between 1 and 5)
    except KeyError:
        custom_rating = 1  # If 'stars' is not available, default to 1 (or another reasonable value)

    # Dynamically calculate function rating based on some aspect of the result (you can customize this)
    try:
        func_rating = scale_to_1_5(result['validity']['score'], min_value=0, max_value=100)  # Scale to 1-5
    except KeyError:
        func_rating = custom_rating  # If no validity score, use custom rating as fallback

    # Write the entry to the CSV file
    with open(csv_file, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([user_prompt, url_to_check, func_rating, custom_rating])

    print(f"Entry added to CSV. Function Rating: {func_rating}, Custom Rating (Stars): {custom_rating}")

# Create the CSV file if it doesn't exist
create_csv()

# Add new entries to the CSV
while True:
    add_entry()
    continue_adding = input("Do you want to add another entry? (yes/no): ").strip().lower()
    if continue_adding != 'yes':
        break

print("All entries have been added to the CSV.")